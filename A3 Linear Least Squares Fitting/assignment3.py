# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xDyT2_kDAMOo1Cgoh3GgO_cSb1UZDAUf
"""

from pylab import *
import scipy.special as sp

#Q2
import numpy as np

data_table = np.loadtxt('fitting.dat')
t = c_[data_table[:,0]]
N,k = shape(data_table); k -= 1
A0 = 1.05; B = -0.105	#True value
scl=logspace(-1,-3,k) # noise stdev

#Q3
for i in range(k):
  plot(t,data_table[:,i+1],label = ("sigma = %0.3f"%scl[i]))

R = g(t,1.05,-0.105)
plot(t,R,color = 'k',label = "True value")

xlabel(r'$t$',size=20)
ylabel(r'$f(t)+noise$',size=20)
title(r'Q4: data to be fitted to theory')
grid(True)
legend()
show()

#Q4
def g(t,A,B):
  return A*sp.jn(2,t) + B*t

#Q5
errorbar(t[::5],data_table[:,1][::5],0.1,fmt='ro',label = "Errorbar")
plot(t,R,color = 'k',label = "f(t)")
xlabel(r'$t$',size=20)
title(r'Q5: Data points for sigma = 0.10 along with exact function')
grid(True)
legend()
show()

#Q6
M = c_[sp.jn(2,t),t]
p = [[1.05],[-0.105]]
x = dot(M,p)
if x.all() == R.all():
  print("verified: positive result")

#Q7
E = np.zeros(441*k).reshape(21,21,k)
A = np.linspace(0,2,21)
B = np.linspace(-0.2,0,21)
for i in range(21):
  for j in range(21):
    for c in range(k):
      for r in range(101):
        E[i][j][c] += (data_table[r][c+1] - g(t[r],A[i],B[j]))**2
      E[i][j][c] = E[i][j][c]/101

#Q8
contour(A,B,E[:,:,0])
xlabel(r'$A$',size=20)
ylabel(r'$B$',size=20)
title(r'Q8: contour plot of Eij for sigma=0.1')
show()

#Q9 and Q10
Aerr = np.zeros(k)
Berr = np.zeros(k)
from scipy.linalg import lstsq
for i in range(k):
  p,resid,rank,sig=lstsq(M,c_[data_table[:,i+1]])
  Aerr[i] = abs(p[0] - 1.05)
  Berr[i] = abs(p[1] - (-0.105))

plot(scl,Aerr,'ro',label = "Aerr",linestyle='dashed')
plot(scl,Berr,'bo',label = "Berr",linestyle='dashed')
xlabel(r'$Noise Standard deviation$',size=20)
ylabel(r'$MS error$',size=20)
title(r'Q10: Variation of error with noise')
grid(True)
legend()
show()

#Q11
plot(log10(scl),log10(Aerr),'ro',label = "Aerr",linestyle='dashed')
plot(log10(scl),log10(Berr),'bo',label = "Berr",linestyle='dashed')
xlabel(r'$Noise Standard deviation$',size=20)
ylabel(r'$MS error$',size=20)
title(r'Q10: Variation of error with noise')
grid(True)
legend()
show()
