# -*- coding: utf-8 -*-
"""Assignment7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nyeq_mYJekolfECs9M6AIgtGNQodAUNm
"""

import scipy.signal as sp
init_session
from sympy import *
import pylab as p
import numpy as np
from sympy import symbols, fraction

# Q1: Low pass filter with step as input
s=symbols('s') 
def lowpass(R1,R2,C1,C2,G,Vi):
  A=Matrix([[0,0,1,-1/G],[-1/(1+s*R2*C2),1,0,0], [0,-G,G,1],[-1/R1-1/R2-s*C1,1/R2,0,s*C1]])
  b=Matrix([0,0,0,-Vi/R1])
  V=A.inv()*b
  return (A,b,V)

A,b,V=lowpass(10000,10000,1e-9,1e-9,1.586,1)
Vo=V[3]

num,den = fraction(Vo)

c_num = []
c_den = []

isfloat = False
try:
  num=poly(num,s).all_coeffs()
except GeneratorsNeeded:
  c_num = num
  isfloat = True

den=poly(den,s).all_coeffs()

if (isfloat):
  c_den = den
else:
  for i in num:
    c_num.append(float(i))
  c_num = np.array(c_num)

  for i in den:
    c_den.append(float(i))
  c_den = np.array(c_den)


H=sp.lti(c_num,c_den)
t,Vo=sp.step(H,None,np.linspace(0,0.001,1000))

# plot
p.plot(t,Vo,'-r',label=r'$V_{o}$')
p.title("Vo(t) in low pass filter with given input")
p.xlabel(r'$t\rightarrow$')
p.ylabel(r'$V\rightarrow$')
p.legend(loc ='upper right')
p.savefig("step_respl.png")
p.show()

# Q2: low pass filter with high and low frequency mixed input
t = np.linspace(0,0.01,100000)
Vi = np.multiply((np.sin(2000*np.pi*t)+np.cos(2000000*np.pi*t)),np.heaviside(t,0.5))
Vo = sp.lsim(H,Vi,T=t)

# plot
p.plot(t,Vi,label=r'$V_{in}$')
p.plot(t,Vo[1],'-r',label=r'$V_{o}$')
p.title("Vo(t) in low pass filter with given input")
p.xlabel(r'$t\rightarrow$')
p.ylabel(r'$V\rightarrow$')
p.legend(loc ='upper right')
p.savefig("mixed_f_respl.png")
p.show()

# Q3:
def highpass(R1,R2,C1,C2,G,Vi):
  s=symbols('s')
  A=Matrix([[0,0,1,-1/G],[-1/(1+1/(s*R2*C2)),1,0,0],[0,-G,G,1],[-s*C1-s*C2-1/R1,s*C2,0,1/R1]])
  b=Matrix([0,0,0,-Vi*s*C1])
  V=A.inv()*b
  return (A,b,V)

A,b,V = highpass(10000,10000,1e-9,1e-9,1.586,1)
H=V[3]
ww=p.logspace(0,8,801)
ss=1j*ww
hf=lambdify(s,H,'numpy')
v=hf(ss)
p.loglog(ww,abs(v),lw=2)
p.xlabel(r'$w\rightarrow$')
p.ylabel(r'$|H(jw)|\rightarrow$')
p.title("magnitude response of transfer function for high pass filter")
p.grid(True)
p.savefig("mag_response.png")
p.show()

# Q4:
num,den = fraction(H)

c_num = []
c_den = []
num=poly(num,s).all_coeffs()
den=poly(den,s).all_coeffs()

for i in num:
  c_num.append(float(i))
c_num = np.array(c_num)

for i in den:
  c_den.append(float(i))
c_den = np.array(c_den)

H=sp.lti(c_num,c_den)
t = np.linspace(0,10,1000)
Vi = np.multiply(np.multiply(np.exp(-0.5*t),np.sin(2000*np.pi*t)),np.heaviside(t,0.5))
Vo = sp.lsim(H,Vi,t)

# plot
p.plot(t,Vi,label=r'$V_{in}$')
p.plot(t,Vo[1],'-r',label=r'$V_{o}$')
p.title("Vo(t) for damping sinusoid with frequency less than cut off frequency")
p.xlabel(r'$t\rightarrow$')
p.ylabel(r'$V\rightarrow$')
p.legend(loc ='upper right')
p.savefig("damp_l.png")
p.show()

t = np.linspace(0,0.0001,10000)
Vi = np.multiply(np.multiply(np.exp(-0.5*t),np.sin(200000*np.pi*t)),np.heaviside(t,0.5))
Vo = sp.lsim(H,Vi,T=t)

# plot
p.plot(t,Vi,label=r'$V_{in}$')
p.plot(t,Vo[1],'-r',label=r'$V_{o}$')
p.title("Vo(t) for damping sinusoid with frequency more than cut off frequency")
p.xlabel(r'$t\rightarrow$')
p.ylabel(r'$V\rightarrow$')
p.legend(loc ='upper right')
p.savefig("damp_h.png")
p.show()

# Q5:
t,Vo=sp.step(H,None,np.linspace(0,0.001,1000))
 
# plot
p.plot(t,Vo,'-r',label=r'$V_{o}$')
p.title("step response for highpass filter")
p.xlabel(r'$t\rightarrow$')
p.ylabel(r'$V\rightarrow$')
p.legend(loc ='upper right')
p.savefig("step_resph.png")
p.show()